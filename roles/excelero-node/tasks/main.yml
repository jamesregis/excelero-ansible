
---

- name: Optimize MLX5 configuration
  shell:
    cmd: |
      for mlx in $(ibdev2netdev | grep Up | awk '{ print $1 }'); do
        mlxconfig -d $mlx -b /etc/opt/NVMesh/Excelero_mlxconfig.db --yes set ONE_QP_PER_RECOVERY=1
      done
      touch {{ ansible_env.HOME }}/.mlx5_0-configured
    creates: "{{ ansible_env.HOME }}/.mlx5_0-configured"
    executable: /bin/bash
  register: mlx5_config

- name: Create API credentials local directory
  file:
    path: "{{ ansible_env.HOME }}/.nvmesh_cli_files"
    state: directory

- name: Create API credentials file
  template:
    src: nvmesh_api_secrets.j2
    dest: "{{ ansible_env.HOME }}/.nvmesh_cli_files/nvmesh_api_secrets"

# useless
# - pause:
#     prompt: "Before continue, make sur the API credentials are the good ones !"

- name: Install NVMesh core and utils
  package:
    name:
      - nvmesh-core
      - nvmesh-utils
      - nvme-cli
      # - nvmesh-nvmft   # we do not need the NVMeoF transport

- set_fact:
    management_server_with_port: "{{ management_server_with_port}} + [ '{{ item }}'+':4001' ]"
  loop: "{{ groups.excelero_mgrs }}"

- name: Initialize MANAGEMENT_SERVERS in /etc/nvmesh/nvmesh.conf
  lineinfile:
    path: "/etc/opt/NVMesh/nvmesh.conf"
    regexp: "^MANAGEMENT_SERVERS="
    line: MANAGEMENT_SERVERS='{{ ",".join(management_server_with_port) }}'
  notify:
    - restart-client
    - restart-target

- name: Initialize CONFIGURED_NICS in /etc/nvmesh/nvmesh.conf
  lineinfile:
    path: "/etc/opt/NVMesh/nvmesh.conf"
    regexp: '^CONFIGURED_NICS='
    line: CONFIGURED_NICS="{{ configured_nics }}"
  notify:
    - restart-client
    - restart-target

- name: Disable RDDA transport
  lineinfile:
    path: "/etc/nvmesh/nvmesh.conf"
    line: MLX5_RDDA_ENABLED="False"
  notify:
    - restart-client
    - restart-target

- name: Kernel tuning recommendations
  template:
    src: etc/modprobe.d/nvmesh_options.conf.j2
    dest: /etc/modprobe.d/nvmesh_options.conf
  register: module_reboot

- name: Reboot host (if required) and wait for restart
  reboot:
    msg: "Reboot initiated by Ansible"
    connect_timeout: 5
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami
  when: mlx5_config.changed or module_reboot.changed

- meta: flush_handlers

- name: Check if there are connected NVMe drives
  shell:
    cmd: |
      lspci | grep -i 'Non-Volatile memory controller'
    executable: /bin/bash
  register: has_nvme_drive

- name: Enable target only on node that has NVMe drives
  systemd:
    name: nvmeshtarget
    state: started
    enabled: yes
  when: has_nvme_drive.rc == 0

- name: Enable and start NVMesh client
  systemd:
    name: nvmeshclient
    state: started
    enabled: yes

- name: Wait for targets and TOMA
  shell:
    cmd: |
      nvmesh target show --output-format json | jq -r '.[] | select (.tomaStatus!="up" or .health!="Healthy") | .tomaStatus + " " + .health'
    executable: /bin/bash
  retries: 10
  delay: 5
  register: nve_target_status
  until: nve_target_status.stdout == ""
  when: inventory_hostname == groups['excelero_mgrs'][0]

- name: Initialize NVMe drives (if required)
  include: initialize-nvme-drive.yml
  when: inventory_hostname == groups['excelero_mgrs'][0]

- name: Create default volumes
  include_tasks: create-default-volume.yml
  vars:
    volume_index: "{{ nvme_volume.volume_index }}"
    volume_prefix: "{{ nvme_volume.volume_prefix }}"
    volume_size: "{{ nvme_volume.size }}"
    volume_raid_level: "{{ nvme_volume.raid_level }}"
    volume_mount_point: "{{ nvme_volume.mount_point }}"
  loop: "{{ volumes_to_create }}"
  loop_control:
    loop_var: nvme_volume

- name: Create and mount partitions
  include_tasks: create-and-mount-partition.yml
  vars:
    volume_index: "{{ nvme_volume.volume_index }}"
    volume_prefix: "{{ nvme_volume.volume_prefix }}"
    volume_size: "{{ nvme_volume.size }}"
    volume_raid_level: "{{ nvme_volume.raid_level }}"
    volume_mount_point: "{{ nvme_volume.mount_point }}"
  loop: "{{ volumes_to_create }}"
  loop_control:
    loop_var: nvme_volume

- debug:
    msg: "Verify the nodes and check in to management to see the clients and the targets with the NVMe drives on the Dashboard page of WebUI."
  run_once: true
